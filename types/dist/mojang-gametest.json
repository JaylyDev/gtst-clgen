{
  "RegistrationBuilder": {
    "batch": "(batchName: string): RegistrationBuilder",
    "required": "(isRequired: boolean): RegistrationBuilder",
    "requiredSuccessfulAttempts": "(attemptCount: int32): RegistrationBuilder",
    "maxAttempts": "(attemptCount: int32): RegistrationBuilder",
    "maxTicks": "(tickCount: int32): RegistrationBuilder",
    "setupTicks": "(tickCount: int32): RegistrationBuilder",
    "structureName": "(structureName: string): RegistrationBuilder",
    "padding": "(paddingBlocks: int32): RegistrationBuilder",
    "rotateTest": "(rotate: boolean): RegistrationBuilder",
    "tag": "(tag: string): RegistrationBuilder"
  },
  "Test": {
    "assertBlockState": "(blockLocation: BlockLocation, callback: closure): undefined",
    "assertBlockPresent": "(blockType: BlockType, blockLocation: BlockLocation, isPresent: boolean): undefined",
    "assertCanReachLocation": "(mob: Entity, blockLocation: BlockLocation, canReach: boolean): undefined",
    "assert": "(condition: boolean, message: string): undefined",
    "assertContainerContains": "(itemStack: ItemStack, blockLocation: BlockLocation): undefined",
    "assertContainerEmpty": "(blockLocation: BlockLocation): undefined",
    "assertEntityState": "(blockLocation: BlockLocation, entityTypeIdentifier: string, callback: closure): undefined",
    "assertEntityHasArmor": "(entityTypeIdentifier: string, armorSlot: int32, armorName: string, armorData: int32, blockLocation: BlockLocation, hasArmor: boolean): undefined",
    "assertEntityHasComponent": "(entityTypeIdentifier: string, componentIdentifier: string, blockLocation: BlockLocation, hasComponent: boolean): undefined",
    "assertEntityInstancePresent": "(entity: Entity, blockLocation: BlockLocation, isPresent: boolean): undefined",
    "assertEntityPresent": "(entityTypeIdentifier: string, blockLocation: BlockLocation, isPresent: boolean): undefined",
    "assertEntityPresentInArea": "(entityTypeIdentifier: string, isPresent: boolean): undefined",
    "assertEntityTouching": "(entityTypeIdentifier: string, location: Location, isTouching: boolean): undefined",
    "assertIsWaterlogged": "(blockLocation: BlockLocation, isWaterlogged: boolean): undefined",
    "assertItemEntityCountIs": "(itemType: ItemType, blockLocation: BlockLocation, searchDistance: float, count: int32): undefined",
    "assertItemEntityPresent": "(itemType: ItemType, blockLocation: BlockLocation, searchDistance: float, isPresent: boolean): undefined",
    "assertRedstonePower": "(blockLocation: BlockLocation, power: int32): undefined",
    "fail": "(errorMessage: string): undefined",
    "failIf": "(callback: closure): undefined",
    "getBlock": "(blockLocation: BlockLocation): Block",
    "getDimension": "(): Dimension",
    "getFenceConnectivity": "(blockLocation: BlockLocation): FenceConnectivity",
    "getSculkSpreader": "(blockLocation: BlockLocation): SculkSpreader",
    "getTestDirection": "(): Direction",
    "killAllEntities": "(): undefined",
    "pressButton": "(blockLocation: BlockLocation): undefined",
    "print": "(text: string): undefined",
    "pullLever": "(blockLocation: BlockLocation): undefined",
    "pulseRedstone": "(blockLocation: BlockLocation, duration: int32): undefined",
    "relativeBlockLocation": "(worldBlockLocation: BlockLocation): BlockLocation",
    "relativeLocation": "(worldLocation: Location): Location",
    "removeSimulatedPlayer": "(simulatedPlayer: SimulatedPlayer): undefined",
    "rotateDirection": "(direction: Direction): Direction",
    "runAfterDelay": "(delayTicks: int32, callback: closure): undefined",
    "runAtTickTime": "(tick: int32, callback: closure): undefined",
    "idle": "(tickDelay: int32): promise",
    "until": "(callback: closure): promise",
    "triggerInternalBlockEvent": "(blockLocation: BlockLocation, event: string, eventParameters: array): undefined",
    "setBlockPermutation": "(blockData: BlockPermutation, blockLocation: BlockLocation): undefined",
    "setBlockType": "(blockType: BlockType, blockLocation: BlockLocation): undefined",
    "setFluidContainer": "(location: BlockLocation, type: int32): undefined",
    "setTntFuse": "(entity: Entity, fuseLength: int32): undefined",
    "spawn": "(entityTypeIdentifier: string, blockLocation: BlockLocation): Entity",
    "spawnAtLocation": "(entityTypeIdentifier: string, location: Location): Entity",
    "spawnItem": "(itemStack: ItemStack, location: Location): Entity",
    "spawnSimulatedPlayer": "(blockLocation: BlockLocation, name: string, gameMode: GameMode): SimulatedPlayer",
    "spawnWithoutBehaviors": "(entityTypeIdentifier: string, blockLocation: BlockLocation): Entity",
    "spawnWithoutBehaviorsAtLocation": "(entityTypeIdentifier: string, location: Location): Entity",
    "spreadFromFaceTowardDirection": "(blockLocation: BlockLocation, fromFace: Direction, direction: Direction): undefined",
    "startSequence": "(): GameTestSequence",
    "succeed": "(): undefined",
    "succeedIf": "(callback: closure): undefined",
    "succeedOnTick": "(tick: int32): undefined",
    "succeedOnTickWhen": "(tick: int32, callback: closure): undefined",
    "succeedWhen": "(callback: closure): undefined",
    "succeedWhenBlockPresent": "(blockType: BlockType, blockLocation: BlockLocation, isPresent: boolean): undefined",
    "succeedWhenEntityHasComponent": "(entityTypeIdentifier: string, componentIdentifier: string, blockLocation: BlockLocation, hasComponent: boolean): undefined",
    "succeedWhenEntityPresent": "(entityTypeIdentifier: string, blockLocation: BlockLocation, isPresent: boolean): undefined",
    "walkTo": "(mob: Entity, blockLocation: BlockLocation, speedModifier: float): undefined",
    "walkToLocation": "(mob: Entity, location: Location, speedModifier: float): undefined",
    "worldBlockLocation": "(relativeBlockLocation: BlockLocation): BlockLocation",
    "worldLocation": "(relativeLocation: Location): Location"
  },
  "GameTestSequence": {
    "thenExecute": "(callback: closure): GameTestSequence",
    "thenExecuteAfter": "(delayTicks: int32, callback: closure): GameTestSequence",
    "thenExecuteFor": "(tickCount: int32, callback: closure): GameTestSequence",
    "thenFail": "(errorMessage: string): undefined",
    "thenIdle": "(delayTicks: int32): GameTestSequence",
    "thenSucceed": "(): undefined",
    "thenWait": "(callback: closure): GameTestSequence",
    "thenWaitAfter": "(delayTicks: int32, callback: closure): GameTestSequence"
  },
  "FenceConnectivity": {
    "north": "boolean",
    "east": "boolean",
    "south": "boolean",
    "west": "boolean"
  },
  "Tags": {},
  "SimulatedPlayer": {
    "id": "string",
    "location": "Location",
    "velocity": "Vector",
    "dimension": "Dimension",
    "nameTag": "string",
    "isSneaking": "boolean",
    "target": "Entity",
    "viewVector": "Vector",
    "headLocation": "Location",
    "bodyRotation": "float",
    "name": "string",
    "selectedSlot": "int32",
    "headRotation": "PitchYawRotation",
    "hasComponent": "(componentId: string): boolean",
    "getComponent": "(componentId: string): IEntityComponent",
    "getComponents": "(): array",
    "setVelocity": "(velocity: Vector): undefined",
    "teleport": "(location: Location, dimension: Dimension, xRotation: float, yRotation: float): undefined",
    "teleportFacing": "(location: Location, dimension: Dimension, facingLocation: Location): undefined",
    "kill": "(): undefined",
    "getEffect": "(effectType: EffectType): Effect",
    "addEffect": "(effectType: EffectType, duration: int32, amplifier: int32, showParticles: boolean): undefined",
    "triggerEvent": "(eventName: string): undefined",
    "runCommand": "(commandString: string): any",
    "addTag": "(tag: string): boolean",
    "removeTag": "(tag: string): boolean",
    "hasTag": "(tag: string): boolean",
    "getTags": "(): array",
    "getEntitiesFromViewVector": "(options: optional): array",
    "getBlockFromViewVector": "(options: optional): Block",
    "postClientMessage": "(id: string, value: string): undefined",
    "startItemCooldown": "(itemCategory: string, tickDuration: int32): undefined",
    "getItemCooldown": "(itemCategory: string): int32",
    "playSound": "(soundID: string, soundOptions: optional): undefined",
    "jump": "(): boolean",
    "rotateBody": "(angleInDegrees: float): undefined",
    "setBodyRotation": "(angleInDegrees: float): undefined",
    "lookAtBlock": "(blockLocation: BlockLocation): undefined",
    "lookAtEntity": "(entity: Entity): undefined",
    "lookAtLocation": "(location: Location): undefined",
    "move": "(westEast: float, northSouth: float, speed: float): undefined",
    "moveRelative": "(leftRight: float, backwardForward: float, speed: float): undefined",
    "moveToLocation": "(location: Location, speed: float): undefined",
    "moveToBlock": "(blockLocation: BlockLocation, speed: float): undefined",
    "navigateToLocation": "(location: Location, speed: float): NavigationResult",
    "navigateToLocations": "(locations: array, speed: float): undefined",
    "navigateToBlock": "(blockLocation: BlockLocation, speed: float): NavigationResult",
    "navigateToEntity": "(entity: Entity, speed: float): NavigationResult",
    "stopMoving": "(): undefined",
    "attack": "(): boolean",
    "attackEntity": "(entity: Entity): boolean",
    "useItemInSlot": "(slot: int32): boolean",
    "useItem": "(itemStack: ItemStack): boolean",
    "useItemOnBlock": "(itemStack: ItemStack, blockLocation: BlockLocation, direction: int32, faceLocationX: float, faceLocationY: float): boolean",
    "useItemInSlotOnBlock": "(slot: int32, blockLocation: BlockLocation, direction: int32, faceLocationX: float, faceLocationY: float): boolean",
    "interactWithEntity": "(entity: Entity): boolean",
    "interactWithBlock": "(blockLocation: BlockLocation, direction: int32): boolean",
    "interact": "(): boolean",
    "breakBlock": "(blockLocation: BlockLocation, direction: int32): boolean",
    "stopBreakingBlock": "(): undefined",
    "stopInteracting": "(): undefined",
    "stopUsingItem": "(): undefined",
    "giveItem": "(itemStack: ItemStack, selectSlot: boolean): boolean",
    "setItem": "(itemStack: ItemStack, slot: int32, selectSlot: boolean): boolean",
    "setGameMode": "(gameMode: GameMode): undefined"
  }
}